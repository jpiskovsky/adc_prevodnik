                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ISO C Compiler 
                                      3 ; Version 4.4.0 #14620 (Linux)
                                      4 ;--------------------------------------------------------
                                      5 	.module stm8s_clk_CLK_PeripheralClockConfig
                                      6 	.optsdcc -mstm8
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _CLK_PeripheralClockConfig
                                     12 ;--------------------------------------------------------
                                     13 ; ram data
                                     14 ;--------------------------------------------------------
                                     15 	.area DATA
                                     16 ;--------------------------------------------------------
                                     17 ; ram data
                                     18 ;--------------------------------------------------------
                                     19 	.area INITIALIZED
                                     20 ;--------------------------------------------------------
                                     21 ; absolute external ram data
                                     22 ;--------------------------------------------------------
                                     23 	.area DABS (ABS)
                                     24 
                                     25 ; default segment ordering for linker
                                     26 	.area HOME
                                     27 	.area GSINIT
                                     28 	.area GSFINAL
                                     29 	.area CONST
                                     30 	.area INITIALIZER
                                     31 	.area CODE
                                     32 
                                     33 ;--------------------------------------------------------
                                     34 ; global & static initialisations
                                     35 ;--------------------------------------------------------
                                     36 	.area HOME
                                     37 	.area GSINIT
                                     38 	.area GSFINAL
                                     39 	.area GSINIT
                                     40 ;--------------------------------------------------------
                                     41 ; Home
                                     42 ;--------------------------------------------------------
                                     43 	.area HOME
                                     44 	.area HOME
                                     45 ;--------------------------------------------------------
                                     46 ; code
                                     47 ;--------------------------------------------------------
                                     48 	.area CODE
                                     49 ;	../SPLSPL/src/stm8s_clk_CLK_PeripheralClockConfig.c: 39: void CLK_PeripheralClockConfig(CLK_Peripheral_TypeDef CLK_Peripheral, FunctionalState NewState)
                                     50 ; genLabel
                                     51 ;	-----------------------------------------
                                     52 ;	 function CLK_PeripheralClockConfig
                                     53 ;	-----------------------------------------
                                     54 ;	Register assignment is optimal.
                                     55 ;	Stack space usage: 2 bytes.
      000000                         56 _CLK_PeripheralClockConfig:
      000000 89               [ 2]   57 	pushw	x
                                     58 ; genReceive
      000001 97               [ 1]   59 	ld	xl, a
                                     60 ;	../SPLSPL/src/stm8s_clk_CLK_PeripheralClockConfig.c: 50: CLK->PCKENR1 |= (uint8_t)((uint8_t)1 << ((uint8_t)CLK_Peripheral & (uint8_t)0x0F));
                                     61 ; genAnd
      000002 9F               [ 1]   62 	ld	a, xl
      000003 A4 0F            [ 1]   63 	and	a, #0x0f
                                     64 ; genLeftShift
      000005 88               [ 1]   65 	push	a
      000006 A6 01            [ 1]   66 	ld	a, #0x01
      000008 6B 02            [ 1]   67 	ld	(0x02, sp), a
      00000A 84               [ 1]   68 	pop	a
      00000B 4D               [ 1]   69 	tnz	a
      00000C 27 05            [ 1]   70 	jreq	00134$
      00000E                         71 00133$:
      00000E 08 01            [ 1]   72 	sll	(0x01, sp)
      000010 4A               [ 1]   73 	dec	a
      000011 26 FB            [ 1]   74 	jrne	00133$
      000013                         75 00134$:
                                     76 ;	../SPLSPL/src/stm8s_clk_CLK_PeripheralClockConfig.c: 55: CLK->PCKENR1 &= (uint8_t)(~(uint8_t)(((uint8_t)1 << ((uint8_t)CLK_Peripheral & (uint8_t)0x0F))));
                                     77 ; genCpl
      000013 7B 01            [ 1]   78 	ld	a, (0x01, sp)
      000015 43               [ 1]   79 	cpl	a
      000016 6B 02            [ 1]   80 	ld	(0x02, sp), a
                                     81 ;	../SPLSPL/src/stm8s_clk_CLK_PeripheralClockConfig.c: 45: if (((uint8_t)CLK_Peripheral & (uint8_t)0x10) == 0x00)
                                     82 ; genAnd
      000018 9F               [ 1]   83 	ld	a, xl
      000019 A5 10            [ 1]   84 	bcp	a, #0x10
      00001B 27 03            [ 1]   85 	jreq	00135$
      00001D CCr00r3A         [ 2]   86 	jp	00108$
      000020                         87 00135$:
                                     88 ; skipping generated iCode
                                     89 ;	../SPLSPL/src/stm8s_clk_CLK_PeripheralClockConfig.c: 50: CLK->PCKENR1 |= (uint8_t)((uint8_t)1 << ((uint8_t)CLK_Peripheral & (uint8_t)0x0F));
                                     90 ; genPointerGet
      000020 C6 50 C7         [ 1]   91 	ld	a, 0x50c7
                                     92 ;	../SPLSPL/src/stm8s_clk_CLK_PeripheralClockConfig.c: 47: if (NewState != DISABLE)
                                     93 ; genIfx
      000023 0D 05            [ 1]   94 	tnz	(0x05, sp)
      000025 26 03            [ 1]   95 	jrne	00136$
      000027 CCr00r32         [ 2]   96 	jp	00102$
      00002A                         97 00136$:
                                     98 ;	../SPLSPL/src/stm8s_clk_CLK_PeripheralClockConfig.c: 50: CLK->PCKENR1 |= (uint8_t)((uint8_t)1 << ((uint8_t)CLK_Peripheral & (uint8_t)0x0F));
                                     99 ; genOr
      00002A 1A 01            [ 1]  100 	or	a, (0x01, sp)
                                    101 ; genPointerSet
      00002C C7 50 C7         [ 1]  102 	ld	0x50c7, a
                                    103 ; genGoto
      00002F CCr00r51         [ 2]  104 	jp	00110$
                                    105 ; genLabel
      000032                        106 00102$:
                                    107 ;	../SPLSPL/src/stm8s_clk_CLK_PeripheralClockConfig.c: 55: CLK->PCKENR1 &= (uint8_t)(~(uint8_t)(((uint8_t)1 << ((uint8_t)CLK_Peripheral & (uint8_t)0x0F))));
                                    108 ; genAnd
      000032 14 02            [ 1]  109 	and	a, (0x02, sp)
                                    110 ; genPointerSet
      000034 C7 50 C7         [ 1]  111 	ld	0x50c7, a
                                    112 ; genGoto
      000037 CCr00r51         [ 2]  113 	jp	00110$
                                    114 ; genLabel
      00003A                        115 00108$:
                                    116 ;	../SPLSPL/src/stm8s_clk_CLK_PeripheralClockConfig.c: 63: CLK->PCKENR2 |= (uint8_t)((uint8_t)1 << ((uint8_t)CLK_Peripheral & (uint8_t)0x0F));
                                    117 ; genPointerGet
      00003A C6 50 CA         [ 1]  118 	ld	a, 0x50ca
                                    119 ;	../SPLSPL/src/stm8s_clk_CLK_PeripheralClockConfig.c: 60: if (NewState != DISABLE)
                                    120 ; genIfx
      00003D 0D 05            [ 1]  121 	tnz	(0x05, sp)
      00003F 26 03            [ 1]  122 	jrne	00137$
      000041 CCr00r4C         [ 2]  123 	jp	00105$
      000044                        124 00137$:
                                    125 ;	../SPLSPL/src/stm8s_clk_CLK_PeripheralClockConfig.c: 63: CLK->PCKENR2 |= (uint8_t)((uint8_t)1 << ((uint8_t)CLK_Peripheral & (uint8_t)0x0F));
                                    126 ; genOr
      000044 1A 01            [ 1]  127 	or	a, (0x01, sp)
                                    128 ; genPointerSet
      000046 C7 50 CA         [ 1]  129 	ld	0x50ca, a
                                    130 ; genGoto
      000049 CCr00r51         [ 2]  131 	jp	00110$
                                    132 ; genLabel
      00004C                        133 00105$:
                                    134 ;	../SPLSPL/src/stm8s_clk_CLK_PeripheralClockConfig.c: 68: CLK->PCKENR2 &= (uint8_t)(~(uint8_t)(((uint8_t)1 << ((uint8_t)CLK_Peripheral & (uint8_t)0x0F))));
                                    135 ; genAnd
      00004C 14 02            [ 1]  136 	and	a, (0x02, sp)
                                    137 ; genPointerSet
      00004E C7 50 CA         [ 1]  138 	ld	0x50ca, a
                                    139 ; genLabel
      000051                        140 00110$:
                                    141 ;	../SPLSPL/src/stm8s_clk_CLK_PeripheralClockConfig.c: 71: }
                                    142 ; genEndFunction
      000051 85               [ 2]  143 	popw	x
      000052 85               [ 2]  144 	popw	x
      000053 84               [ 1]  145 	pop	a
      000054 FC               [ 2]  146 	jp	(x)
                                    147 	.area CODE
                                    148 	.area CONST
                                    149 	.area INITIALIZER
                                    150 	.area CABS (ABS)
