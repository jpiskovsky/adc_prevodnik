                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ISO C Compiler 
                                      3 ; Version 4.4.0 #14620 (Linux)
                                      4 ;--------------------------------------------------------
                                      5 	.module stm8s_clk_CLK_ITConfig
                                      6 	.optsdcc -mstm8
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _CLK_ITConfig
                                     12 ;--------------------------------------------------------
                                     13 ; ram data
                                     14 ;--------------------------------------------------------
                                     15 	.area DATA
                                     16 ;--------------------------------------------------------
                                     17 ; ram data
                                     18 ;--------------------------------------------------------
                                     19 	.area INITIALIZED
                                     20 ;--------------------------------------------------------
                                     21 ; absolute external ram data
                                     22 ;--------------------------------------------------------
                                     23 	.area DABS (ABS)
                                     24 
                                     25 ; default segment ordering for linker
                                     26 	.area HOME
                                     27 	.area GSINIT
                                     28 	.area GSFINAL
                                     29 	.area CONST
                                     30 	.area INITIALIZER
                                     31 	.area CODE
                                     32 
                                     33 ;--------------------------------------------------------
                                     34 ; global & static initialisations
                                     35 ;--------------------------------------------------------
                                     36 	.area HOME
                                     37 	.area GSINIT
                                     38 	.area GSFINAL
                                     39 	.area GSINIT
                                     40 ;--------------------------------------------------------
                                     41 ; Home
                                     42 ;--------------------------------------------------------
                                     43 	.area HOME
                                     44 	.area HOME
                                     45 ;--------------------------------------------------------
                                     46 ; code
                                     47 ;--------------------------------------------------------
                                     48 	.area CODE
                                     49 ;	../SPLSPL/src/stm8s_clk_CLK_ITConfig.c: 39: void CLK_ITConfig(CLK_IT_TypeDef CLK_IT, FunctionalState NewState)
                                     50 ; genLabel
                                     51 ;	-----------------------------------------
                                     52 ;	 function CLK_ITConfig
                                     53 ;	-----------------------------------------
                                     54 ;	Register assignment is optimal.
                                     55 ;	Stack space usage: 1 bytes.
      000000                         56 _CLK_ITConfig:
      000000 88               [ 1]   57 	push	a
                                     58 ; genReceive
                                     59 ;	../SPLSPL/src/stm8s_clk_CLK_ITConfig.c: 47: switch (CLK_IT)
                                     60 ; genCmpEQorNE
      000001 A1 0C            [ 1]   61 	cp	a, #0x0c
      000003 26 09            [ 1]   62 	jrne	00150$
      000005 88               [ 1]   63 	push	a
      000006 A6 01            [ 1]   64 	ld	a, #0x01
      000008 6B 02            [ 1]   65 	ld	(0x02, sp), a
      00000A 84               [ 1]   66 	pop	a
      00000B CCr00r10         [ 2]   67 	jp	00151$
      00000E                         68 00150$:
      00000E 0F 01            [ 1]   69 	clr	(0x01, sp)
      000010                         70 00151$:
                                     71 ; genCmpEQorNE
      000010 A1 1C            [ 1]   72 	cp	a, #0x1c
      000012 26 05            [ 1]   73 	jrne	00153$
      000014 A6 01            [ 1]   74 	ld	a, #0x01
      000016 CCr00r1A         [ 2]   75 	jp	00154$
      000019                         76 00153$:
      000019 4F               [ 1]   77 	clr	a
      00001A                         78 00154$:
                                     79 ;	../SPLSPL/src/stm8s_clk_CLK_ITConfig.c: 45: if (NewState != DISABLE)
                                     80 ; genIfx
      00001A 0D 04            [ 1]   81 	tnz	(0x04, sp)
      00001C 26 03            [ 1]   82 	jrne	00155$
      00001E CCr00r44         [ 2]   83 	jp	00110$
      000021                         84 00155$:
                                     85 ;	../SPLSPL/src/stm8s_clk_CLK_ITConfig.c: 47: switch (CLK_IT)
                                     86 ; genIfx
      000021 0D 01            [ 1]   87 	tnz	(0x01, sp)
      000023 27 03            [ 1]   88 	jreq	00156$
      000025 CCr00r39         [ 2]   89 	jp	00102$
      000028                         90 00156$:
                                     91 ; genIfx
      000028 4D               [ 1]   92 	tnz	a
      000029 26 03            [ 1]   93 	jrne	00157$
      00002B CCr00r64         [ 2]   94 	jp	00112$
      00002E                         95 00157$:
                                     96 ;	../SPLSPL/src/stm8s_clk_CLK_ITConfig.c: 50: CLK->SWCR |= CLK_SWCR_SWIEN;
                                     97 ; genPointerGet
      00002E C6 50 C5         [ 1]   98 	ld	a, 0x50c5
                                     99 ; genOr
      000031 AA 04            [ 1]  100 	or	a, #0x04
                                    101 ; genPointerSet
      000033 C7 50 C5         [ 1]  102 	ld	0x50c5, a
                                    103 ;	../SPLSPL/src/stm8s_clk_CLK_ITConfig.c: 51: break;
                                    104 ; genGoto
      000036 CCr00r64         [ 2]  105 	jp	00112$
                                    106 ;	../SPLSPL/src/stm8s_clk_CLK_ITConfig.c: 52: case CLK_IT_CSSD: /* Enable the clock security system detection interrupt */
                                    107 ; genLabel
      000039                        108 00102$:
                                    109 ;	../SPLSPL/src/stm8s_clk_CLK_ITConfig.c: 53: CLK->CSSR |= CLK_CSSR_CSSDIE;
                                    110 ; genPointerGet
      000039 C6 50 C8         [ 1]  111 	ld	a, 0x50c8
                                    112 ; genOr
      00003C AA 04            [ 1]  113 	or	a, #0x04
                                    114 ; genPointerSet
      00003E C7 50 C8         [ 1]  115 	ld	0x50c8, a
                                    116 ;	../SPLSPL/src/stm8s_clk_CLK_ITConfig.c: 54: break;
                                    117 ; genGoto
      000041 CCr00r64         [ 2]  118 	jp	00112$
                                    119 ;	../SPLSPL/src/stm8s_clk_CLK_ITConfig.c: 57: }
                                    120 ; genLabel
      000044                        121 00110$:
                                    122 ;	../SPLSPL/src/stm8s_clk_CLK_ITConfig.c: 61: switch (CLK_IT)
                                    123 ; genIfx
      000044 0D 01            [ 1]  124 	tnz	(0x01, sp)
      000046 27 03            [ 1]  125 	jreq	00158$
      000048 CCr00r5C         [ 2]  126 	jp	00106$
      00004B                        127 00158$:
                                    128 ; genIfx
      00004B 4D               [ 1]  129 	tnz	a
      00004C 26 03            [ 1]  130 	jrne	00159$
      00004E CCr00r64         [ 2]  131 	jp	00112$
      000051                        132 00159$:
                                    133 ;	../SPLSPL/src/stm8s_clk_CLK_ITConfig.c: 64: CLK->SWCR  &= (uint8_t)(~CLK_SWCR_SWIEN);
                                    134 ; genPointerGet
      000051 C6 50 C5         [ 1]  135 	ld	a, 0x50c5
                                    136 ; genAnd
      000054 A4 FB            [ 1]  137 	and	a, #0xfb
                                    138 ; genPointerSet
      000056 C7 50 C5         [ 1]  139 	ld	0x50c5, a
                                    140 ;	../SPLSPL/src/stm8s_clk_CLK_ITConfig.c: 65: break;
                                    141 ; genGoto
      000059 CCr00r64         [ 2]  142 	jp	00112$
                                    143 ;	../SPLSPL/src/stm8s_clk_CLK_ITConfig.c: 66: case CLK_IT_CSSD: /* Disable the clock security system detection interrupt */
                                    144 ; genLabel
      00005C                        145 00106$:
                                    146 ;	../SPLSPL/src/stm8s_clk_CLK_ITConfig.c: 67: CLK->CSSR &= (uint8_t)(~CLK_CSSR_CSSDIE);
                                    147 ; genPointerGet
      00005C C6 50 C8         [ 1]  148 	ld	a, 0x50c8
                                    149 ; genAnd
      00005F A4 FB            [ 1]  150 	and	a, #0xfb
                                    151 ; genPointerSet
      000061 C7 50 C8         [ 1]  152 	ld	0x50c8, a
                                    153 ;	../SPLSPL/src/stm8s_clk_CLK_ITConfig.c: 71: }
                                    154 ; genLabel
      000064                        155 00112$:
                                    156 ;	../SPLSPL/src/stm8s_clk_CLK_ITConfig.c: 73: }
                                    157 ; genEndFunction
      000064 84               [ 1]  158 	pop	a
      000065 85               [ 2]  159 	popw	x
      000066 84               [ 1]  160 	pop	a
      000067 FC               [ 2]  161 	jp	(x)
                                    162 	.area CODE
                                    163 	.area CONST
                                    164 	.area INITIALIZER
                                    165 	.area CABS (ABS)
